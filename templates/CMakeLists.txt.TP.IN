if (projectInclude ("LINUX", "OSX", "WINDOWS", "JAVA")) {
# Header
$output= "# Auto generated please do not edit this file\n";
$output.="# Directory " . $DIR . "\n";

####################################################
##                                                ##
##              Toplevel CMakeLists.txt           ##
##                                                ##
####################################################

if ($LANGUAGE ne "java") {
    if ($LIBRARY ne "") {
        $output.= "set (ALL_SOURCE \${COMPILE_ALL_SOURCE})\n";
    }
    else {
        $output.= "set (ALL_SOURCE Off)\n";
    }
}

if ($DIR eq "...") {
    $output.=
"# RDM 
#
# Copyright (c) 2011 Raima Inc.,  All rights reserved.
#
# Use of this software, whether in source code format, or in executable,
# binary object code form, is governed by the Raima LICENSE which
# is fully described in the LICENSE.TXT file, included within this
# distribution of files.

# Compile as follows:
#
#   1. Install CMake-3.10 for your system (http://cmake.org).
#   2. Run `cmake .' or `cmake-gui' to generate makefiles or
#      project files of your choice.  Run cmake without
#      any arguments for help.
#   3. Open the generated project files and build the solution, or
#      use the generated Makefile with an appropriate make command.

";
    if ($RELEASE_SRC) {
        $output.= "CMAKE_MINIMUM_REQUIRED(VERSION 3.26.4)";
    }
    else {
        $output.= "CMAKE_MINIMUM_REQUIRED(VERSION 3.16.3)";
    }
    $output.= "
set (CMAKE_RULE_MESSAGES OFF)

project(@@PRODUCT_VERSION_PACKAGE@@
    VERSION @@PRODUCT_VERSION_MAJOR@@.@@PRODUCT_VERSION_MINOR@@.@@PRODUCT_VERSION_PATCH@@.@@PRODUCT_VERSION_BUILD@@
    DESCRIPTION \"@@PRODUCT_NAME_LONG@@\"
    LANGUAGES C CXX)

set (CMAKE_CXX_STANDARD 11)
";
    if (! $RELEASE_OBJ) {
        $output.= "
set (NATIVE_DIR FALSE CACHE PATH \"Path to were native development tools for RDM can be found\")
if (NATIVE_DIR)
    include (\"\${NATIVE_DIR}/CMakeFiles/RDMDevelopmentToolsTargets.cmake\")
    if (EXISTS \"\${NATIVE_DIR}/CMakeFiles/RDMTestToolsTargets.cmake\")
        include (\"\${NATIVE_DIR}/CMakeFiles/RDMTestToolsTargets.cmake\")
    endif ()
endif ()

if (BUILD_SHARED_LIBS)
    set (RDM_STATIC_OR_SHARED_TARGETS \"RDMSharedTargets\")
else ()
    set (RDM_STATIC_OR_SHARED_TARGETS \"RDMStaticTargets\")
endif ()

if (CMAKE_CROSSCOMPILING)
    if (RDM_TARGET STREQUAL \"\")
        message(FATAL_ERROR \"The toolchain file for RDM need to set RDM_TARGET\")
    endif ()
    set (TARGET_INSTALL_LIBDIR \"\${RDM_TARGET}/lib\")
    set (TARGET_INSTALL_BINDIR \"\${RDM_TARGET}/bin\")
else ()
    if (RDM_TARGET STREQUAL \"\")
        set (RDM_TARGET \"\${CMAKE_LIBRARY_ARCHITECTURE}\")
    endif ()
    set (TARGET_INSTALL_LIBDIR \"lib\")
    set (TARGET_INSTALL_BINDIR \"bin\")
endif ()
";
    }
    $output.= "
include (\"CMake/AddConfig.txt\")
find_package(Java)
include(UseJava)
if (Java_FOUND)
    set (JAVA on)
endif (Java_FOUND)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

add_custom_target (generated_source)

if (BUILD_SHARED_LIBS)
    set(CMAKE_INSTALL_RPATH \"\${CMAKE_INSTALL_PREFIX}/lib\")
endif (BUILD_SHARED_LIBS)
set (INSTALL_DIR \"";

    if ($RELEASE_OBJ || $RELEASE_TEST) {
        $output.="\${CMAKE_CURRENT_SOURCE_DIR}";
    }

    $output.="\" CACHE STRING \"install directory (needed when building against an installed package)\")
include (CMake/Macros.txt)

#
# Common cache variables that we may change later
#

set (RDM_TAG_MALLOC OFF CACHE BOOL \"call malloc directly instead of using tags\")
set (RDM_TAG_FAIL OFF CACHE BOOL \"Do alloc failure simulation\")
set (RDM_NO_FSYNC OFF CACHE BOOL \"Don't sync files\")
set (RDM_THREAD_NO OFF CACHE BOOL \"Don't use threading\")
set (RDM_SLEEP_DIVIDER \"\" CACHE STRING \"Sleep divider\")
set (RDM_FREE_RTOS OFF CACHE BOOL \"Compile for the FreeRTOS simulator\")
set (RDM_NO_OS OFF CACHE BOOL \"Compile for NO_OS\")
set (RDM_STRUCTURE OFF CACHE BOOL \"Compile with struct data type support\")

#
# Common rules
#

ADD_DEFINITIONS (-DCMAKE)

if (CMAKE_CROSSCOMPILING)
  ADD_DEFINITIONS (-DNO_PREPRO)
endif (CMAKE_CROSSCOMPILING)

if (USE_UNICODE)
  ADD_DEFINITIONS (-D_UNICODE)
  ADD_DEFINITIONS (-DUNICODE)
  set (DEF_DEFINES -dUNICODE)
endif (USE_UNICODE)

if (RDM_THREAD_NO)
  ADD_DEFINITIONS (-DRDM_THREAD_NO)
endif (RDM_THREAD_NO)

if (RDM_NO_FSYNC)
  ADD_DEFINITIONS (-DRDM_NO_FSYNC)
endif (RDM_NO_FSYNC)

if (RDM_TAG_MALLOC)
  ADD_DEFINITIONS (-DRDM_TAG_MALLOC)
endif (RDM_TAG_MALLOC)

if (RDM_TAG_FAIL)
  ADD_DEFINITIONS (-DRDM_TAG_FAIL)
endif (RDM_TAG_FAIL)

if (RDM_NO_OS)
  ADD_DEFINITIONS (-DRDM_NO_OS)
endif (RDM_NO_OS)

if (RDM_FREE_RTOS)
  ADD_DEFINITIONS (-DRDM_FREE_RTOS)
endif (RDM_FREE_RTOS)

if (RDM_STRUCTURE)
  ADD_DEFINITIONS (-DRDM_STRUCTURE)
endif (RDM_STRUCTURE)

if (NOT RDM_SLEEP_DIVIDER STREQUAL \"\")
   ADD_DEFINITIONS (-DRDM_SLEEP_DIVIDER=\${RDM_SLEEP_DIVIDER})
endif (NOT RDM_SLEEP_DIVIDER STREQUAL \"\")

if (INSTALL_DIR)
  find_package (INSTALL)
endif ()
";

    if ($RELEASE_SRC || !$RELEASE) {
        $output.="
set (RDM_EASY_PROFILER OFF CACHE BOOL \"Compile RDM with support for Easy Profiler\")
if (RDM_EASY_PROFILER)
  find_package(easy_profiler REQUIRED)
  set(PLATFORM_LIB \${PLATFORM_LIB} \"easy_profiler\")
  ADD_DEFINITIONS (-DRDM_EASY_PROFILER)
endif (RDM_EASY_PROFILER)

if (\${CMAKE_SYSTEM_NAME} STREQUAL Linux)
CHECK_LIBRARY_EXISTS (profiler ProfilerStart /usr/lib HAVE_PROFILER)
if (HAVE_PROFILER)
    set(PLATFORM_LIB \${PLATFORM_LIB} profiler)
endif (HAVE_PROFILER)
endif (\${CMAKE_SYSTEM_NAME} STREQUAL Linux)
";
    }

    if ($RELEASE_TEST) {
        $output.="
if (INSTALL_DIR)
    include_directories (\${INSTALL_DIR}/include)
endif ()
";
    }
}

####################################################
##                                                ##
##                 Generic Rules                  ##
##                                                ##
####################################################

# C#
if ($LANGUAGE eq 'cs') {
   $output.= "\nif (CSHARP)";
}

# Condition
if ($#PLATFORM_INC >= 0 or $#PLATFORM_EXCL >= 0) {
    $output.= "\nif (";

    my $i= 0;
    if ($#PLATFORM_INC >= 0) {
        if ($#PLATFORM_EXCL >= 0 and $#PLATFORM_INC > 0) {
            $output.= "(";
        }
    
        foreach $inc (@PLATFORM_INC) {
            $output.= "$inc";
            if ($i != $#PLATFORM_INC) {
                $output.= " OR ";
            }
            $i++;
        }
        if ($#PLATFORM_EXCL >= 0) {
           if ($#PLATFORM_INC > 0) {
                $output.= ")";
            }
            $output.= " AND ";
        }
    }

    if ($#PLATFORM_EXCL >= 0) {
        $output.= "NOT ";

        my $i= 0;
        foreach $inc (@PLATFORM_EXCL) {
            $output.= "$inc";
            if ($i != $#PLATFORM_EXCL) {
                $output.= " AND NOT ";
            }
            $i++;
        }
    }
    $output.= ")\n";
}


if ($LIBRARY eq "rdmjdbcjni") {
    $output.= "find_package(JNI)\n";
    $output.= "if (JNI_FOUND)\n";
}

# Process PKG_CONFIG
foreach $pkg (@PKG_CONFIG) {
    $output.= "\npkg_search_module (${pkg} ${pkg})";
}

# Process CMAKE_FIND_PACKAGE
foreach $pkg (@CMAKE_FIND_PACKAGE) {
    $output.= "\nfind_package (${pkg})";
}

# Process DEFINES
$output.= "\nADD_DEFINITIONS (";
if ($#DEFINES >= 0) {
    $output.= "\n    -D";
    $output.= join ("\n    -D", @DEFINES); 
}
if ($#PKG_CONFIG >= 0 or $#CMAKE_FIND_PACKAGE >= 0) {
    foreach $pkg (@PKG_CONFIG, @CMAKE_FIND_PACKAGE) {
        $output.= "\n    \${${pkg}_DEFINITIONS}";
    }
}
foreach $linklibrary (@LINKLIBRARIES) {
    if ($EXISTLIBRARY{$linklibrary} eq "PLATFORM_EXCL" or $EXISTLIBRARY{$linklibrary} eq "PLATFORM_INC") {
        $output.= "\n    \${" . uc(${linklibrary}) . "_DEFINITIONS}";
    }
}
$output.= "\n)\n";

if ($LANGUAGE ne "java" && $LANGUAGE ne "cs") {
    $output.= "\nIF (NOT BUILD_SHARED_LIBS)";
    $output.= "\n    ADD_DEFINITIONS (";
    $output.= "\n        -DRDM_EXPORT=";
    $output.= "\n        -DRDM_IMPORT=";
    $output.= "\n    )";
    $output.= "\nendif (NOT BUILD_SHARED_LIBS)\n";

    $output.= "\nif (ALL_SOURCE)";
    $output.= "\n    ADD_DEFINITIONS (";
    $output.= "\n        -D" . uc(${LIBRARY}) . "_ALL_SOURCE";
    $output.= "\n    )";
    $output.= "\nendif (ALL_SOURCE)\n";
}

# Process SUBDIRS
if ($#SUBDIRS >= 0) {
    $output.= "\nsubdirectories (\n";
    my $subdir;
    for $subdir (@SUBDIRS) {
        if (($RELEASE_OBJ || $RELEASE_TEST) && $subdir eq "source") {
        }
        else {
            $output.= "    $subdir\n";
        }
    }
    $output.= ")\n";
}

if ((! ($DIRPATH =~ m/GettingStarted/)) || ! $RELEASE_SRC) {
    my $indent='';
    # Process source and generated source files
    if (($LIBRARY ne "" or $EXECUTABLE ne "") and $LANGUAGE ne "java") {

       my $JNI_INCLUDE_DIRS = "";
       if ($LIBRARY eq "rdmjdbcjni") {
            $output.= "find_package(JNI)\n";
            $JNI_INCLUDE_DIRS= "\n    \${JNI_INCLUDE_DIRS}";
       }


        # Process INCLUDES
        $output.= "\ninclude_directories (\n";
        $output.= "    \${CMAKE_CURRENT_BINARY_DIR}\n";
        $output.= "    \${CMAKE_CURRENT_SOURCE_DIR}";
        $output.= "$JNI_INCLUDE_DIRS";
        if ($#ALL_INCLUDES >= 0) {
           $output.= "\n    ";
           $output.= join ("\n    ", @ALL_INCLUDES);
           $output.= "\n    \${CMAKE_CURRENT_BINARY_DIR}/";
           $output.= join ("\n    \${CMAKE_CURRENT_BINARY_DIR}/", @ALL_INCLUDES);
        }
        foreach $pkg (@PKG_CONFIG, @CMAKE_FIND_PACKAGE) {
            $output.= "\n    \${${pkg}_INCLUDE_DIR}";
        }
        $output.= "\n)\n";

        if ($LANGUAGE ne "cs") {
          $indent = '    ';
          $output.= "\nif (ALL_SOURCE)";
          $output.= "\n    source (";
          if ($#HDRFILES >= 0) {
              $output.= "\n        ";
              $output.= join ("\n        ", @HDRFILES);
              $output.= "\n";
        
          }

          my $file;
          if ($#SRCFILES >= 0 && ($EXECUTABLE ne "")) {
              $output.= "\n";
              foreach $file (@SRCFILES) {
                  $output.= "        $file\n";
              }
          }

          if ($LIBRARY ne "") {
              foreach $rcfile (@RCFILES) {
                  $output.= "\n        $rcfile\n";
              }
              if ($LANGUAGE eq "c/cpp") {
                  $output.= "\n        all_source.c\n";
                  $output.= "\n        all_sourcex.cpp\n";
              }
              if ($LANGUAGE eq "cpp") {
                  $output.= "\n        all_sourcex.cpp\n";
              }
              elsif ($LANGUAGE eq "m") {
                  $output.= "\n        all_source.m\n";
              }
              elsif ($LANGUAGE eq "cs") {
                  $output.= "\n        all_source.cs\n";
              }
              else {
                  $output.= "\n        all_source.c\n";
              }
          }
          $output.= "    )";
          $output.= "\nelse (ALL_SOURCE)";
        }
        $output.= "\n${indent}source (";
        if ($#HDRFILES >= 0) {
            $output.= "\n$indent    ";
            $output.= join ("\n$indent    ", @HDRFILES);
            $output.= "\n";
        }

        if ($#SRCFILES >= 0) {
            $output.= "\n";
            foreach $file (@SRCFILES) {
                $output.= "$indent    $file\n";
            }
        }

        if ($LIBRARY ne "") {
            foreach $rcfile (@RCFILES) {
                $output.= "\n$indent    $rcfile\n";
            }
        }
        $output.= "$indent)\n";
        if ($LANGUAGE ne "cs") {
          $output.= "endif (ALL_SOURCE)\n";
        }

        # Process all the gen macros.
        foreach $gen_macro (keys (%GEN_MACRO_RULES)) {
            if ($#{$gen_macro} >= 0) {
                $output.= "\n" . lc(${gen_macro}) . " (\n    ";
                $output.= join ("\n    ", @{${gen_macro}});
                $output.= "\n)\n";
            }
        }
    }

    # Process JAVA executables and libraries
    if ($LANGUAGE eq "java") {
        my $version;
        my $jar_file = $EXECUTABLE . $LIBRARY;
        my $main_file;
        my $include_jars;
        my $entry_point;
        my $custom = '';

        if ($DIRPATH eq "source/jdbc/java")
        {
            $output.= "configure_file(Manifest.txt.in Manifest.txt)\n";
            $output.= "configure_file(META-INF/services/java.sql.Driver.in META-INF/services/java.sql.Driver)\n";
            $custom = "add_custom_command(TARGET $jar_file POST_BUILD\n  COMMAND \${Java_JAR_EXECUTABLE} ufm ${jar_file}.jar Manifest.txt\n  COMMAND \${Java_JAR_EXECUTABLE} uf ${jar_file}.jar META-INF/services/java.sql.Driver)\n";
        }
        if ($#LINKLIBRARIES >= 0) {
            my $class_path = "Class-Path:";
            $include_jars = "  INCLUDE_JARS\n";
            foreach $linklibrary (@LINKLIBRARIES) {
                if (${linklibrary} eq "rdmjdbc" && ($RELEASE_OBJ || $RELEASE_TEST)) {
                    $include_jars.= "    \${PROJECT_SOURCE_DIR}/java-lib/rdmjdbc-@@PRODUCT_VERSION_MAJOR@@.jar\n";
                }
                else {
                    $include_jars.= "    ${linklibrary}\n";
                }
                $class_path.= " $TOPDIR/$DIRPATH{${linklibrary}}/${linklibrary}.jar";
            }
            $class_path.= "\n";
            if ($RELEASE_OBJ) {
                $custom = "add_custom_command(TARGET $jar_file POST_BUILD\n  COMMAND \${Java_JAR_EXECUTABLE} ufm $jar_file.jar \${PROJECT_SOURCE_DIR}/java-lib/ClassPath.txt)\n";
            }
            elsif ($RELEASE_TEST) {
                 $output.= "file(GENERATE OUTPUT Manifest.txt CONTENT \"$class_path\")\n";
                 $custom = "add_custom_command(TARGET $jar_file POST_BUILD\n  COMMAND \${Java_JAR_EXECUTABLE} ufm $jar_file.jar Manifest.txt\n  COMMAND \${Java_JAR_EXECUTABLE} ufm $jar_file.jar \${PROJECT_SOURCE_DIR}/java-lib/ClassPath.txt)\n";
            }
            else {
                $output.= "file(GENERATE OUTPUT Manifest.txt CONTENT \"$class_path\")\n";
                $custom = "add_custom_command(TARGET $jar_file POST_BUILD\n  COMMAND \${Java_JAR_EXECUTABLE} ufm $jar_file.jar Manifest.txt)\n";
            }
        }
        else {
             $include_jars = '';
        }

        if ($EXECUTABLE ne "") {
            $entry_point = "  ENTRY_POINT\n    ${EXECUTABLE}_main\n";
            $main_file= "    \${CMAKE_CURRENT_SOURCE_DIR}/${EXECUTABLE}_main.java\n";
            $version = '';
        }
        else {
            $entry_point = '';
            $main_file = '';
            $version = "  VERSION @@PRODUCT_VERSION_MAJOR@@\n";
            $version = '';
        }
        $output.= "\nadd_jar($jar_file\n$version$include_jars$entry_point  SOURCES\n";
        $output.= $main_file;
        foreach $file (@SRCFILES) {
            $output.= "    \${CMAKE_CURRENT_SOURCE_DIR}/$file\n";
        }
        $output.= ")\n$custom";

        if ($DIRPATH =~ m/source/) {
            $output.= "\nif (NOT CMAKE_CROSSCOMPILING)\n";
            $output.= "    install_jar (${jar_file}\n";
            $output.= "        EXPORT RDM\n";
            $output.= "        DESTINATION share/java\n";
            $output.= "        COMPONENT Runtime\n";
            $output.= "    )\n";
            $output.= "\n";
            $output.= "    export_jars (TARGETS\n";
            $output.= "        ${jar_file}\n";
            $output.= "        NAMESPACE RDM::\n";
            $output.= "        FILE \${CMAKE_BINARY_DIR}/CMakeFiles/RDMJarTargets.cmake\n";
            $output.= "    )\n";
            $output.= "\n";
            $output.= "    install_jar_exports (TARGETS\n";
            $output.= "        ${jar_file}\n";
            $output.= "        DESTINATION share/cmake/RDM\n";
            $output.= "        NAMESPACE RDM::\n";
            $output.= "        FILE RDMJarTargets.cmake\n";
            $output.= "        COMPONENT Runtime\n";
            $output.= "    )\n";
            $output.= "endif ()\n";
        }
    }

    # Process LIBRARY
    if ($LIBRARY ne "" and $LANGUAGE ne "java") {
        my $CSharp_prop = $LANGUAGE eq "cs" ? "\n    VS_DOTNET_REFERENCES \"System;System.Data;System.Transactions\"" : "";

        $output.= "if (NOT ${LIBRARY}_LIBRARY)\n";
        $output.= "    set (${LIBRARY}_LIBRARY \"\")\n";
        $output.= "endif ()\n";
        if ($RELEASE_OBJ) {
            $output.= "add_library (${LIBRARY}-@@PRODUCT_VERSION_MAJOR@@ \${SOURCE_FILES})\n";
            $output.= "set_target_properties (${LIBRARY}-@@PRODUCT_VERSION_MAJOR@@  PROPERTIES\n    FOLDER libraries$CSharp_prop\n)\n";
            $output.= "target_link_libraries (${LIBRARY}-@@PRODUCT_VERSION_MAJOR@@";
        }
        else {
            $output.= "\n";
            $output.= "if (CMAKE_CROSSCOMPILING)\n";
            $output.= "    set (DOT_DOT_SLASH_IF_CROSS_COMPILE \"../\")\n";
            $output.= "else ()\n";
            $output.= "    set (DOT_DOT_SLASH_IF_CROSS_COMPILE \"\")\n";
            $output.= "endif ()\n\n";
            $output.= "configure_file(pkgconfig.in\n";
            $output.= "    \"\${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY}.pc\"\n";
            $output.= "    \@ONLY)\n";
            $output.= "install (FILES\n";
            $output.= "    \${CMAKE_CURRENT_BINARY_DIR}/${LIBRARY}.pc\n";
            $output.= "    DESTINATION \${TARGET_INSTALL_LIBDIR}/pkgconfig\n";
            $output.= "    COMPONENT Development\n";
            $output.= ")\n";
            $output.= "\n";
            $output.= "add_library (${LIBRARY} \${SOURCE_FILES})\n";
            $output.= "set_property(TARGET ${LIBRARY} PROPERTY VERSION @@PRODUCT_VERSION_MAJOR@@.@@PRODUCT_VERSION_MINOR@@.@@PRODUCT_VERSION_PATCH@@)\n";
            $output.= "set_target_properties (${LIBRARY} PROPERTIES\n    FOLDER libraries$CSharp_prop\n)\n";
            $output.= "target_link_libraries (${LIBRARY}";
        }

        if ($#LINKLIBRARIES >= 0) {
            foreach $linklibrary (@LINKLIBRARIES) {
                if ($RELEASE_OBJ) {
                    $output.= "\n    ${linklibrary}-@@PRODUCT_VERSION_MAJOR@@";
                }
                else {
                    $output.= "\n    ${linklibrary}";
                }
            }
        }
        else {
            $output.= "\n    \${PLATFORM_LIB}";
        }
        $output.= "\n    \${${LIBRARY}_LIBRARY}";
        if ($DIR eq "replicationsql") {
            $output.= "\n    odbc32";
        }
        foreach $pkg (@PKG_CONFIG, @CMAKE_FIND_PACKAGE) {
            $output.= "\n    \${${pkg}_LIBRARIES}";
        }
        $output.= "\n)";
        if ($LANGUAGE eq "cpp" || $LANGUAGE eq "c/cpp") {
            if ($RELEASE_OBJ) {
                $output.= "\ntarget_compile_options (${LIBRARY}-@@PRODUCT_VERSION_MAJOR@@ PRIVATE ";
            }
            else {
                $output.= "\ntarget_compile_options (${LIBRARY} PRIVATE ";
            }
            if ($EXCEPTIONS) {
                $output.= '${RDM_EXCEPTIONS}';
            }
            else {
                $output.= '${RDM_NO_EXCEPTIONS}';
            }
            if ($RTTI) {
                $output.= ' ${RDM_RTTI}';
            }
            else {
                $output.= ' ${RDM_NO_RTTI}';
            }
            $output.= ")";
        }
        $output.= "\n";

        # Process dependencies
        if ($#DEPENDENCIES >= 0) {
            if ($RELEASE_OBJ)
            {
                $output.= "add_dependencies (${LIBRARY}-@@PRODUCT_VERSION_MAJOR@@ \n";
            }
            else {
                $output.= "add_dependencies (${LIBRARY}\n";
            }
            depend: foreach $dependency (@DEPENDENCIES) {
                foreach $library (@ALL_LIBRARIES) {
                    if ($library eq $dependency) {
                        $output.= "    $dependency\n";
                        next depend;
                    }
                }
                $output.= "    $dependency\n";
            }
            $output.= ")\n";
        }

        if (! ($DIRPATH =~ m/GettingStarted/)) {
            $output.= "\ninstall (TARGETS\n";
            $output.= "    ${LIBRARY}\n";
            $output.= "    EXPORT RDM\n";
            $output.= "    RUNTIME DESTINATION \${TARGET_INSTALL_BINDIR} COMPONENT Runtime\n";
            $output.= "    LIBRARY DESTINATION \${TARGET_INSTALL_LIBDIR} COMPONENT Runtime\n";
            $output.= "    ARCHIVE DESTINATION \${TARGET_INSTALL_LIBDIR} COMPONENT Development\n";
            $output.= "    INCLUDES DESTINATION include\n)";
            $output.= "\n";
            $output.= "export (TARGETS\n";
            $output.= "    ${LIBRARY}\n";
            $output.= "    APPEND FILE \${CMAKE_BINARY_DIR}/CMakeFiles/\${RDM_STATIC_OR_SHARED_TARGETS}.cmake\n";
            $output.= "    NAMESPACE RDM::\n";
            $output.= ")\n\n";
        }
    }

    # Process an executable
    if ($EXECUTABLE ne "" && $LANGUAGE ne "java") {
        my $CSharp_prop = $LANGUAGE eq "cs" ? "\n    VS_DOTNET_REFERENCES \"System;System.Data\"" : "";

        my $ComponentTools;
        if (! $RELEASE_OBJ) {
            if ($BUILDTOOL ne "") {
                if ($DIRPATH =~ m/test/) {
                    $ComponentTools = "TestTools";
                }
                else {
                    $ComponentTools = "DevelopmentTools";
                }
                $output.= "if (NATIVE_DIR)\n";
                $output.= "    # We rely on find_package to get access to the development tools\n";
                $output.= "else ()\n";
            }
            elsif ($DIRPATH =~ m/test/) {
                $ComponentTools = "Test";
            }
            else {
                $ComponentTools = "Runtime";
            }
        }

        $output.= "\nadd_executable ($EXECUTABLE " . $EXECUTABLE . "_main." . $LANGUAGE{"$EXECUTABLE"} . " ";

        foreach $rcfile (@RCFILES) {
            $output.= "\n$indent    $rcfile\n";
        }

#        foreach $rcfile (@RCFILES) {
#            if ($rcfile eq "${EXECUTABLE}_main") {
#                $output.= "$rcfile ";
#                last;
#            }
#        }

        $output.= "\${SOURCE_FILES})\n";
    
        if ($DIRPATH =~ m/source/) {
            $output.= "set_target_properties  ($EXECUTABLE PROPERTIES\n    FOLDER tools$CSharp_prop\n)\n";
        }
        elsif ($DIRPATH =~ m/test/) {
            $output.= "set_target_properties  ($EXECUTABLE PROPERTIES\n    FOLDER test$CSharp_prop\n)\n";
        }
        elsif ($DIRPATH =~ m/GettingStarted/) {
            $output.= "set_target_properties  ($EXECUTABLE PROPERTIES\n    FOLDER examples$CSharp_prop\n)\n";
        }
        elsif ($DIRPATH =~ m/SalesEng/) {
            $output.= "set_target_properties  ($EXECUTABLE PROPERTIES\n    FOLDER SalesEng$CSharp_prop\n)\n";
        }

        $output.= "target_link_libraries ($EXECUTABLE";
        if ($LANGUAGE{"$EXECUTABLE"} eq "m") {
            $output.= "\n    \${FOUNDATION_FRAMEWORK}";
        }
        if ($#LINKLIBRARIES >= 0) {
            foreach $linklibrary (@LINKLIBRARIES) {
                if ($RELEASE_OBJ) {
                    $output.= "\n    ${linklibrary}-@@PRODUCT_VERSION_MAJOR@@";
                }
                else {
                    $output.= "\n    ${linklibrary}";
                }
            }
        }
        else {
            $output.= "\n    \${PLATFORM_LIB}";
        }
        foreach $pkg (@PKG_CONFIG, @CMAKE_FIND_PACKAGE) {
            $output.= "\n    \${${pkg}_LIBRARIES}";
        }
        $output.= "\n)";
        if ($LANGUAGE{"$EXECUTABLE"} eq "cpp" || $LANGUAGE{"$EXECUTABLE"} eq "c/cpp") {
            $output.= "\ntarget_compile_options ($EXECUTABLE PRIVATE ";
            if ($EXCEPTIONS) {
                $output.= '${RDM_EXCEPTIONS}';
            }
            else {
                $output.= '${RDM_NO_EXCEPTIONS}';
            }
            if ($RTTI) {
                $output.= ' ${RDM_RTTI}';
            }
            else {
                $output.= ' ${RDM_NO_RTTI}';
            }
            $output.= ")";
        }
        $output.= "\n";

        # Process dependencies
        if (($RELEASE_SRC || !$RELEASE) && $#DEPENDENCIES >= 0) {
            $output.= "add_dependencies ($EXECUTABLE\n";
            depend: foreach $dependency (@DEPENDENCIES) {
                foreach $library (@ALL_LIBRARIES) {
                    if ($library eq $dependency) {
                        $output.= "    $dependency\n";
                        next depend;
                    }
                }
                $output.= "    $dependency\n";
            }
            $output.= ")\n";
        }

        if (! $RELEASE_OBJ) {
            if (! ($DIRPATH =~ m/GettingStarted/)) {
                $output.= "\n";
                # Install executable
                $output.= "if (NOT CMAKE_SYSTEM_NAME STREQUAL \"VxWorks\")\n";
                $output.= "    install (TARGETS\n";
                $output.= "        $EXECUTABLE\n";
                $output.= "        EXPORT RDM\n";
                $output.= "        RUNTIME DESTINATION \${TARGET_INSTALL_BINDIR} COMPONENT $ComponentTools\n";
                $output.= "    )\n";
                $output.= "endif (NOT CMAKE_SYSTEM_NAME STREQUAL \"VxWorks\")\n\n";
            }

            if ($BUILDTOOL ne "") {
                $output.= "\n";
                $output.= "    export (TARGETS\n";
                $output.= "        $EXECUTABLE\n";
                $output.= "        APPEND FILE \${CMAKE_BINARY_DIR}/CMakeFiles/RDM${ComponentTools}Targets.cmake\n";
                $output.= "    )\n\n";
                $output.= "endif (NATIVE_DIR)\n";
            }
        }
    }
}

# Install headers
if ($INSTALL_HEADERS eq "yes") {
    $output.= "\nif (NOT CMAKE_CROSSCOMPILING)\n";
    $output.= "\n    install (FILES\n    ";
    $output.= join ("\n    ", @HDRFILES);
    $output.= "\n        DESTINATION include COMPONENT Development\n";
    $output.= "    )\n";
    $output.= "endif ()\n";
    $output.= "\n";
}

# Tests
if (@TESTS >= 0) {
    my $test;
    my $shell;
    if ($DIRPATH =~ m/test/) {
        $shell = "bash";
    }
    else {
        $shell = "sh";
    }
    my $add_path= "PATH=path_list_append:.";
    my $add_config_path= "PATH=path_list_append:\$<CONFIG>";
    foreach $dep (@DEPENDENCIES) {
        $add_path.= ";PATH=\$<TARGET_PROPERTY:${dep},BINARY_DIR>";
        $add_config_path.= ";PATH=path_list_append:\$<TARGET_PROPERTY:${dep},BINARY_DIR>/\$<CONFIG>";
    }

    $output.= "\n";
    foreach $test (@TESTS) {
        if ($test =~ m/(.*)\.sh$/) {
            $output.= "if (UNIX)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME ${1} CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND $shell \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties(${1} PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND $shell \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "endif (UNIX)\n";
        }
        elsif ($test =~ m/(.*)\.bat$/) {
            $output.= "if (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME ${1} CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties(${1} PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "endif (WINDOWS)\n";
        }
        elsif ($test =~ m/(.*)\.ps1$/) {
            $output.= "if (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "else (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "endif (WINDOWS)\n";
        }
        elsif ($test =~ m/(.*)\.pl$/) {
            $output.= "if (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND perl \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND perl \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "else (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND perl \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND perl \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "endif (WINDOWS)\n";
        }
        elsif ($test =~ m/(.*)\.jar$/) {
            $output.= "if (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND \${Java_JAVA_EXECUTABLE} -jar $test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND \${Java_JAVA_EXECUTABLE} -jar $test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "else (WINDOWS)\n";
            $output.= "    if (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 CONFIGURATIONS Debug Release RelWithDebInfo MinSizeRel COMMAND perl \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_config_path\")\n";
            $output.= "    else (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "        add_test (NAME $1 COMMAND perl \${CMAKE_CURRENT_SOURCE_DIR}/$test)\n";
            $output.= "        set_tests_properties($1 PROPERTIES ENVIRONMENT_MODIFICATION \"$add_path\")\n";
            $output.= "    endif (CMAKE_CONFIGURATION_TYPES)\n";
            $output.= "endif (WINDOWS)\n";
        }
        else {
            $output.= "add_test ($test $test \${EXCLUDEFEATURE})\n";
        }
    }
    # Process dependencies
    if (($RELEASE_SRC || !$RELEASE) && $#DEPENDENCIES >= 0) {
        my $test_dep=$DIRPATH . "_dep";
        $test_dep =~ s#/#_#g;
        $output.= "\nadd_custom_target ($test_dep ALL DEPENDS \n";
        depend: foreach $dependency (@DEPENDENCIES) {
            foreach $library (@ALL_LIBRARIES) {
                if ($library eq "rdm$dependency") {
                    if ($RELEASE_OBJ) {
                        $output.= "    rdm$dependency-@@PRODUCT_VERSION_MAJOR@@\n";
                    }
                    else {
                        $output.= "    rdm$dependency\n";
                    }
                    next depend;
                }
            }
            $output.= "    $dependency\n";
        }
        $output.= ")\n";
        $output.= "set_target_properties  ($test_dep PROPERTIES FOLDER dep)\n";
    }
}

# Install GettingStarted examples
if ($DIRPATH eq ".") {
    $output.= "if (NOT CMAKE_CROSSCOMPILING)\n";
    $output.= "    configure_file (visualstudio.sln.install \${CMAKE_CURRENT_BINARY_DIR}/cmake_install/visualstudio.sln \@ONLY)\n";
    $output.= "    install (\n";
    $output.= "        FILES\n";
    $output.= "            \${CMAKE_CURRENT_BINARY_DIR}/cmake_install/visualstudio.sln\n";
    $output.= "        DESTINATION share/RDM\n";
    $output.= "        COMPONENT GettingStarted\n";
    $output.= "    )\n";
    $output.= "endif ()\n";
}
if ($DIRPATH =~ m/GettingStarted/ && (! $RELEASE_OBJ) && ($LANGUAGE eq "c" || $LANGUAGE eq "cpp" || $LANGUAGE eq "java") && $EXECUTABLE ne '') {
    $output.= "\n";
    $output.= "if (NOT CMAKE_CROSSCOMPILING)\n";
    if ($LANGUAGE ne "java" && projectInclude ("WINDOWS")) {
        $output.= "    configure_file (visualstudio.vcxproj.install \${CMAKE_CURRENT_BINARY_DIR}/cmake_install/$EXECUTABLE.vcxproj \@ONLY)\n";
    }
    $output.= "    configure_file (CMakeLists.txt.install \${CMAKE_CURRENT_BINARY_DIR}/cmake_install/CMakeLists.txt \@ONLY)\n";
    $output.= "    install (\n";
    $output.= "        FILES\n";
    $output.= "            README.md\n";
    if ($LANGUAGE ne "java" && projectInclude ("WINDOWS")) {
        $output.= "            \${CMAKE_CURRENT_BINARY_DIR}/cmake_install/$EXECUTABLE.vcxproj\n";
    }
    $output.= "            \${CMAKE_CURRENT_BINARY_DIR}/cmake_install/CMakeLists.txt\n";
    $output.= "            ${EXECUTABLE}_main.$LANGUAGE\n";
    foreach my $file (@SRCFILES, @HDRFILES, @TESTS) {
        $output.= "            $file\n";
    }
    foreach my $gen_macro (keys (%GEN_MACRO_RULES)) {
        foreach my $macro (@{$gen_macro}) {
            foreach $argument (@{$GEN_MACRO_RULES{$gen_macro}{input}}) {
                    my ${arg}= "${argument}";
                    ${arg} =~ s/\$\{base\}/${macro}/;
                    $output.= "            \${CMAKE_CURRENT_SOURCE_DIR}/${arg}\n";
            }
        }
    }
    $output.= "        DESTINATION share/RDM/$DIRPATH\n";
    $output.= "        COMPONENT GettingStarted\n";
    $output.= "    )\n";
    $output.= "endif ()\n";
}

if ($LIBRARY eq "rdmjdbcjni") {
    $output.= "endif (JNI_FOUND)\n";
}

if ($DIRPATH =~ m/GettingStarted/ && $#EXTRA_DIST >= 0) {
    $output.= "\n";
    $output.= "if (NOT CMAKE_CROSSCOMPILING)\n";
    $output.= "    install (\n";
    $output.= "        FILES\n";

    foreach my $file (@EXTRA_DIST) {
        $output.= "            $file\n";
    }
    $output.= "        DESTINATION share/RDM/$DIRPATH\n";
    $output.= "        COMPONENT GettingStarted\n";
    $output.= "    )\n";
    $output.= "endif ()\n";
}


# Condition
if ($#PLATFORM_INC >= 0 or $#PLATFORM_EXCL >= 0) {
   if ($LIBRARY ne "") {
       if ($RELEASE_OBJ) {
           $output.= "    set (" . uc(${LIBRARY}) . "_LIBRARY \"${LIBRARY}-@@PRODUCT_VERSION_MAJOR@@\")\n";
       }
       else {
           $output.= "    set (" . uc(${LIBRARY}) . "_LIBRARY \"${LIBRARY}\")\n";
       }
       $output.= "    set (HAVE_" . uc(${LIBRARY}) . "_DEFINITION \" -DHAVE_" . uc(${LIBRARY}) . "\")\n";
   }
   $output.= "endif ()\n";
}

# C#
if ($LANGUAGE eq 'cs') {
   $output.= "endif (CSHARP)\n";
}

# Install targets and exports
if (! $RELEASE_OBJ && $DIR eq "...") {
    if ($RELEASE_SRC) {
        $output.= "\n";
        $output.= "install (FILES\n    \n";
        $output.= "    \${CMAKE_BINARY_DIR}/CMakeFiles/preset.json\n";
        $output.= "    DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
        $output.= "    COMPONENT Development\n";
        $output.= ")\n";
    }
    $output.= "\n";
    $output.= "if (CMAKE_CROSSCOMPILING)\n";
    $output.= "    install (FILES\n";
    $output.= "        target/\${RDM_TARGET}/toolchain.cmake\n";
    $output.= "        DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
    $output.= "        COMPONENT Development\n";
    $output.= "    )\n";
    $output.= "    file(GLOB INSTALL_FILES \"\${CMAKE_CURRENT_SOURCE_DIR}/target/\${RDM_TARGET}/*\")\n";
    $output.= "    list(FILTER INSTALL_FILES EXCLUDE REGEX \"toolchain.cmake\$\")\n";
    $output.= "    if(INSTALL_FILES)\n";
    $output.= "        install (FILES\n";
    $output.= "            \${INSTALL_FILES}\n";
    $output.= "            DESTINATION share/RDM/\${RDM_TARGET}\n";
    $output.= "            COMPONENT Development\n";
    $output.= "        )\n";
    $output.= "    endif ()\n";
    $output.= "else ()\n";
    $output.= "    if (EXISTS \"\${CMAKE_SOURCE_DIR}/EXPAT_LICENSE.txt\")\n";
    $output.= "        install (FILES\n";
    $output.= "            EXPAT_LICENSE.txt\n";
    $output.= "            DESTINATION share/RDM\n";
    $output.= "            COMPONENT Development\n";
    $output.= "        )\n";
    $output.= "    endif ()\n";
    $output.= "\n";
    $output.= "    install (FILES\n";
    $output.= "        LICENSE.txt\n";
    $output.= "        OPENSSL_LICENSE.txt\n";
    $output.= "        versioninfo.xml\n";
    $output.= "        patch.txt\n";
    $output.= "        RELEASE-NOTES.txt\n";
    $output.= "        DESTINATION share/RDM\n";
    $output.= "        COMPONENT Development\n";
    $output.= "    )\n";
    $output.= "    install (DIRECTORY\n";
    $output.= "        docs\n";
    $output.= "        DESTINATION share/RDM\n";
    $output.= "        COMPONENT Development\n";
    $output.= "    )\n";
    if (grep { $_ eq 'admin-gui' } @EXTRA_DIST) {
        $output.= "    install (DIRECTORY\n";
        $output.= "        admin-gui\n";
        $output.= "        DESTINATION share/RDM\n";
        $output.= "        COMPONENT Development\n";
        $output.= "    )\n";
    }
    $output.= "    install (DIRECTORY\n";
    $output.= "        README\n";
    $output.= "        DESTINATION share/RDM\n";
    $output.= "        COMPONENT Development\n";
    $output.= "    )\n";
    $output.= "endif ()\n";
    $output.= "\n";
    $output.= "install(EXPORT RDM\n";
    $output.= "    FILE \${RDM_STATIC_OR_SHARED_TARGETS}.cmake\n";
    $output.= "    NAMESPACE RDM::\n";
    $output.= "    DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
    $output.= "    COMPONENT Development\n";
    $output.= ")\n";
    $output.= "\n";
    $output.= "include(CMakePackageConfigHelpers)\n";
    $output.= "if (NOT CMAKE_CROSSCOMPILING)\n";
    $output.= "    install(EXPORT RDM\n";
    $output.= "        FILE RDMDevelopmentToolsTargets.cmake\n";
    $output.= "        NAMESPACE RDM_DEVELOPMENT_TOOLS::\n";
    $output.= "        DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
    $output.= "        COMPONENT DevelopmentTools\n";
    $output.= "    )\n";
    $output.= "    set (CPACK_COMPONENT_DEVELOPMENTTOOLS_DEPENDS RUNTIME)\n";
    $output.= "endif ()\n";
    $output.= "\n";
    $output.= "install(EXPORT RDM\n";
    $output.= "    FILE RDMTestToolsTargets.cmake\n";
    $output.= "    NAMESPACE RDM_DEVELOPMENT_TOOLS::\n";
    $output.= "    DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
    $output.= "    COMPONENT TestTools\n";
    $output.= ")\n";
    $output.= "set (CPACK_COMPONENT_TESTTOOLS_DEPENDS RUNTIME)\n";
    $output.= "\n";
    $output.= "configure_package_config_file(CMake/RDMConfig.cmake.in\n";
    $output.= "    \${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/RDMConfig.cmake\n";
    $output.= "    INSTALL_DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
    $output.= ")\n";
    $output.= "\n";
    $output.= "write_basic_package_version_file(\n";
    $output.= "    \"\${CMAKE_BINARY_DIR}/CMakeFiles/RDMConfigVersion.cmake\"\n";
    $output.= "    VERSION @@PRODUCT_VERSION_MAJOR@@.@@PRODUCT_VERSION_MINOR@@.@@PRODUCT_VERSION_PATCH@@\n";
    $output.= "    COMPATIBILITY ExactVersion\n";
    $output.= ")\n";
    $output.= "\n";
    $output.= "install (FILES\n";
    $output.= "        \"\${CMAKE_BINARY_DIR}/CMakeFiles/RDMConfig.cmake\"\n";
    $output.= "        \"\${CMAKE_BINARY_DIR}/CMakeFiles/RDMConfigVersion.cmake\"\n";
    $output.= "    DESTINATION \${TARGET_INSTALL_LIBDIR}/cmake/RDM\n";
    $output.= "    COMPONENT Development\n";
    $output.= ")\n";
    $output.= "set (CPACK_COMPONENT_GETTINGSTARTED_DEPENDS RUNTIME)\n";
    $output.= "\n";
    $output.= "include (InstallRequiredSystemLibraries)\n";
    $output.= "\n";
    $output.= "set(CPACK_PACKAGE_NAME \"@@PRODUCT_VERSION_PACKAGE@@\")\n";
    $output.= "set(CPACK_PACKAGE_INSTALL_DIRECTORY \"\${CPACK_PACKAGE_NAME}-@@PRODUCT_VERSION_MAJOR@@.@@PRODUCT_VERSION_MINOR@@.@@PRODUCT_VERSION_PATCH@@.@@PRODUCT_VERSION_BUILD@@\")\n";
    $output.= "set(CPACK_STGZ_INSTALL_DIRECTORY \"\${CPACK_PACKAGE_NAME}\")\n";
    $output.= "if (BUILD_SHARED_LIBS)\n";
    $output.= "    set(CPACK_PACKAGE_NAME \"\${CPACK_PACKAGE_NAME}-shared\")\n";
    $output.= "else ()\n";
    $output.= "    set(CPACK_PACKAGE_NAME \"\${CPACK_PACKAGE_NAME}-static\")\n";
    $output.= "endif ()\n";
    $output.= "set(CPACK_PACKAGE_NAME \"\${CPACK_PACKAGE_NAME}\")\n";

    # CPack does not have support for multi-arch, this is a workaround
    $output.= "if (CMAKE_CROSSCOMPILING)\n";
    $output.= "    set(CPACK_PACKAGE_NAME \"\${CPACK_PACKAGE_NAME}-\${RDM_TARGET}\")\n";
    $output.= "endif ()\n";
    $output.= "\n";

    $output.= "set (CPACK_RESOURCE_FILE_LICENSE \"\${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\")\n";
    $output.= "set (CPACK_PACKAGE_VERSION \"@@PRODUCT_VERSION_MAJOR@@.@@PRODUCT_VERSION_MINOR@@.@@PRODUCT_VERSION_PATCH@@.@@PRODUCT_VERSION_BUILD@@\")\n";
    $output.= "set (CPACK_PACKAGE_CONTACT \"@@PRODUCT_SUPPORT@@\")\n";
    $output.= "set (CPACK_PACKAGE_VENDOR \"@@PRODUCT_COPYRIGHT_HOLDER@@\")\n";
    $output.= "\n";
    $output.= "if (BUILD_SHARED_LIBS)\n";
    $output.= "    set (CPACK_COMPONENT_TEST_DEPENDS RUNTIME)\n";
    $output.= "endif ()\n";

    $output.= "set (CPACK_MONOLITHIC_INSTALL ON)\n";

    $output.= "include(CPack)\n";
}
}
