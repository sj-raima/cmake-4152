if (projectInclude ("LINUX", "OSX", "IOS", "ANDROID", "QNX") && $LANGUAGE ne "java" && $LANGUAGE ne "cs") {
# Header

$Makefile_RDM_configure= "copy (\'$DIRPATH/Makefile.rdm\', \"\$target/$DIRPATH/Makefile\");\n" . $Makefile_RDM_configure;
if ($DIRPATH eq '.') {
    $Makefile_RDM_configure= "mkdir (\"\$target\");\n" . $Makefile_RDM_configure;
}
else {
    $Makefile_RDM_configure= "mkdir (\"\$target/$DIRPATH\");\n" . $Makefile_RDM_configure;
}

$output= "# Auto generated please do not edit this file\n";
$output.="# Directory " . $DIR . "\n";

if ("$DIRPATH" eq ".") {
}

$output.= '.SUFFIXES:

CD = cd
CC = gcc
CXX = g++
CPPFLAGS =
CFLAGS =
CXXFLAGS =
EXCEPTIONSFLAGS = -fexceptions
NOEXCEPTIONSFLAGS = -fno-exceptions
RTTIFLAGS = -frtti
NORTTIFLAGS = -fno-rtti
AR = ar
LD = $(CC)
LDFLAGS =
RM = rm -f
LIBS =
LINK = $(CC) $(LDFLAGS)
CXXLINK = $(CXX) $(LDFLAGS)
COMPILE = $(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDES) $(DEFINES)
CXXCOMPILE = $(CXX) $(CXXFLAGS) $(CPPFLAGS) ';

if ($EXCEPTIONS) {
    $output.= '$(EXCEPTIONSFLAGS)';
}
else {
    $output.= '$(NOEXCEPTIONSFLAGS)';
}
if ($RTTI) {
    $output.= ' $(RTTIFLAGS)';
}
else {
    $output.= ' $(NORTTIFLAGS)';
}

$output.= ' $(INCLUDES) $(DEFINES)
ALL_SOURCE = on

';

$output.= "VPATH = $TOPDIR/../$DIRPATH\n\n";

foreach $buildtool (@Makefile_RDM_buildtools) {
    $buildtool_rel = $buildtool;
    $buildtool_rel =~ s/= /= $TOPDIR/;
    $output.= "$buildtool_rel\n";
}
$output.= "\n";

if ($BUILDTOOL) {
    my $tool = uc "$EXECUTABLE";
    $tool =~ s/-/_/;
    push @Makefile_RDM_buildtools, "$tool = /$DIRPATH/$EXECUTABLE";
}

# Process SUBDIRS
if ($#SUBDIRS >= 0) {
    my $dir;
    $output.= 'SUBDIRS =';
    foreach $dir (@SUBDIRS) {
        $output.= " \\\n    $dir";
    }
    $output.= '
all clean depend: $(SUBDIRS)
$(SUBDIRS):
	$(MAKE) -C $@ $(MAKECMDGOALS)

.PHONY: all clean depend $(SUBDIRS)
';
}

# Process library and executable
elsif ($LIBRARY ne "" or $EXECUTABLE ne "") {

    if ($LIBRARY ne "") {
         $output.= "all_with_tool_dep: tool_dep all\n";
        $output.= "all: lib$LIBRARY.a\n";
    }
    if ($EXECUTABLE ne "") {
         $output.= "all_with_lib_and_tool_dep: lib_dep tool_dep all\n";
         $output.= 'all: ' . $EXECUTABLE . "\n";
    }

    # Process INCLUDES
    $output.= "INCLUDES =";
    if ($#ALL_INCLUDES >= 0) {
       $output.= " \\\n    -I$TOPDIR/../$DIRPATH";
       $output.= " \\\n    -I.";
       $output.= " \\\n    -I";
       $output.= join (" \\\n    -I", @ALL_INCLUDES);
       $output.= " \\\n    -I$TOPDIR/../$DIRPATH/";
       $output.= join (" \\\n    -I$TOPDIR/../$DIRPATH/", @ALL_INCLUDES);
    }
    $output.= "\n\n";

    # Process DEFINES
    $output.= "DEFINES =";
    if ($#ALL_DEFINES >= 0) {
       $output.= " \\\n    -D";
       $output.= join (" \\\n    -D", @ALL_DEFINES);
    }
    $output.= "\n";
    if ($EXECUTABLE eq "") {
        $output.= "ifeq (\$(ALL_SOURCE), on)\n";
        $output.= "DEFINES += \\\n";
        $output.= "    -D" . uc(${LIBRARY}) . "_ALL_SOURCE\n";
        $output.= "endif\n";
    }
    $output.= "\n";

    my @BLD_SRCFILES = ();
    my @GEN_SRCFILES = ();
    my %tool_dir;
    # Process all the gen macros for the case where we use NATIVE_INSTALL_DIR
    foreach $gen_macro (keys (%GEN_MACRO_RULES)) {
        foreach $macro (@{$gen_macro}) {
            foreach $argument (@{$GEN_MACRO_RULES{$gen_macro}{outputC}}) {
                my ${arg}= "${argument}";
                ${arg} =~ s/\$\{base\}/${macro}/;
                push @BLD_SRCFILES, ${arg};
            }
            foreach $argument ((@{$GEN_MACRO_RULES{$gen_macro}{outputH}}, @{$GEN_MACRO_RULES{$gen_macro}{outputC}}, @{$GEN_MACRO_RULES{$gen_macro}{output}})) {
                my ${arg}= "${argument}";
                ${arg} =~ s/\$\{base\}/${macro}/;
                $output.= "${arg} ";
                push @GEN_SRCFILES, ${arg};
            }
            $output.= ":";
            foreach $argument (@{$GEN_MACRO_RULES{$gen_macro}{input}}) {
                my ${arg}= "${argument}";
                ${arg} =~ s/\$\{base\}/${macro}/;
                $output.= " ${arg}";
            }

            my $cmds = '';
            foreach $argument (@{$GEN_MACRO_RULES{$gen_macro}{command}}) {
                my ${arg}= "${argument}";
                my ${cmd}=  "${argument}";
                my ${dir}=  "${argument}";
                ${dir} =~ s/ .*$//;
                ${dir} =~ s/\/[^\/]*$//;
                $tool_dir{${dir}} = 't';
                ${cmd} =~ s/ .*$//;
                ${cmd} =~ s/^.*\///;
                ${cmd} =~ s/-/_/;
                ${cmd} = '$(' . uc ${cmd} . ')';
                ${arg} =~ s/^[^ ]* /$cmd /;
                ${arg} =~ s/\$\{base\}/${macro}/;
                ${arg} =~ s/\$\{input_base\}[^ ]*/\$</;
                ${arg} =~ s/\$\{output_base\}/${macro}/;
                ${arg} =~ s/\$\{include_dir\}/${TOPDIR}\/include/;
                ${arg} =~ s/\$\{docroot\}/\./;
                $output.= " ${cmd}";
                ${cmds}.= "\n\t${arg}";
            } 
            $output.= "${cmds}\n\n";
         }
    }

    $output.="tool_dep:\n";
    foreach $dir (keys %tool_dir) {
        $output.= "\t\$(MAKE) -C $TOPDIR/$dir all_with_lib_and_tool_dep\n";
    }
    $output.= "\n";

    my @EXE_SRCFILE = ();
    if ($EXECUTABLE ne "") {
        push @EXE_SRCFILE, ($EXECUTABLE . "_main." . $LANGUAGE{"$EXECUTABLE"});
    }

    if ($EXECUTABLE eq "") {
        $output.= "ifeq (\$(ALL_SOURCE), on)\n";
        $output.= "OBJ = \\\n";
        if ($LANGUAGE eq "c/cpp") {
            $output.= "    all_source.o \\\n";
            $output.= "    all_sourcex.o\n";
        }
        elsif ($LANGUAGE eq "cpp") {
            $output.= "    all_sourcex.o\n";
        }
        else {
            $output.= "    all_source.o\n";
        }
        $output.= "else\n";
    }
    $output.= "OBJ =";
    foreach $file ((@BLD_SRCFILES, @SRCFILES, @EXE_SRCFILE)) {
        $output.= " \\\n    " . basename($file, ('.c', '.cc', '.cpp')) . ".o";
    }
    if ($EXECUTABLE eq "") {
        $output.= "\nendif";
    }
    $output.= "\n\n";

    if ($EXECUTABLE eq "") {
        $output.= "REAL_SRC =";
    }
    else {
        $output.= "SRC =";
    }
    foreach $file ((@BLD_SRCFILES, @SRCFILES, @EXE_SRCFILE)) {
        $output.= " \\\n    $file";
    }
    $output.= "\n";
    if ($EXECUTABLE eq "") {
        $output.= "ifeq (\$(ALL_SOURCE), on)\n";
        $output.= "    SRC = \\\n";
        if ($LANGUAGE eq "c/cpp") {
            $output.= "        all_source.c \\\n";
            $output.= "        all_sourcex.cpp\n";
        }
        elsif ($LANGUAGE eq "cpp") {
            $output.= "        all_sourcex.cpp\n";
        }
        else {
            $output.= "        all_source.$LANGUAGE\n";
        }
        $output.= "else\n";
        $output.= "    SRC = \\\n";
        $output.= "        \$(REAL_SRC)\n";
        $output.= "\nendif";
    }
    $output.= "\n";

    $output.= "GEN_SRC =";
    foreach $file (@GEN_SRCFILES) {
        $output.= " \\\n    $file";
    }
    $output.= "\n\n";

    # Process LIBRARY
    if ($LIBRARY ne "") {
        my ${LIBRARY_TARGET}= ${LIBRARY};
        ${LIBRARY_TARGET}=~ tr/-/_/;

        $output.= "lib$LIBRARY.a: \$(OBJ)\n";
        $output.= '	$(AR) sr lib' . $LIBRARY . '.a $(OBJ)' . "\n\n";
        $output.= "clean:\n";
        $output.= '	-$(RM) lib' . $LIBRARY . '.a $(OBJ) $(GEN_SRC)' . "\n\n" 
    }

    # Process executable
    if ($EXECUTABLE ne "") {
        my ${EXECUTABLE_TARGET}= ${EXECUTABLE};
        ${EXECUTABLE_TARGET}=~ tr/-/_/;

        $output.= "lib_dep:\n";
        if ($#ALL_LINKLIBRARIES >= 0) {
            foreach $linklibrary (@ALL_LINKLIBRARIES) {
                $output.= "\t\$(MAKE) -C ${TOPDIR}/$DIRPATH{${linklibrary}} all_with_tool_dep\n";
            }
        }
        $output.= "\n";

        $output.= "LDADD = ";
        if ($#ALL_LINKLIBRARIES >= 0) {
            foreach $linklibrary (@ALL_LINKLIBRARIES) {
                $output.= " \\\n    ${TOPDIR}/$DIRPATH{${linklibrary}}/lib${linklibrary}.a";
            }
        }
        $output.= "\n\n";

        $output.= $EXECUTABLE . ': $(OBJ) $(LDADD)' . "\n";
        if ($LANGUAGE eq "c") {
            $output.= '	$(LINK) -o ' . $EXECUTABLE . ' $(OBJ) $(LDADD) $(LIBS)' . "\n\n";
        }
        else {
            $output.= '	$(CXXLINK) -o ' . $EXECUTABLE . ' $(OBJ) $(LDADD) $(LIBS)' . "\n\n";
        }
        $output.= "clean:\n";
        $output.= '	-$(RM) ' . $EXECUTABLE . ' $(OBJ) $(GEN_SRC)' . "\n\n" 
    }

    if ($EXECUTABLE eq "") {
        if ($LANGUAGE eq 'c' or $LANGUAGE eq 'c/cpp') {
            $output.= "all_source.o: all_source.c \$(REAL_SRC) \$(GEN_SRC)\n";
            $output.= "\n	\$(COMPILE) -o all_source.o -c \$<\n";
        }
        if ($LANGUAGE eq 'cpp' or $LANGUAGE eq 'c/cpp') {
            $output.= "all_sourcex.o: all_sourcex.cpp \$(REAL_SRC) \$(GEN_SRC)\n";
            $output.= "\n	\$(CXXCOMPILE) -o all_sourcex.o -c \$<\n";
        }
    }
    foreach $file ((@SRCFILES, @BLD_SRCFILES, @EXE_SRCFILE)) {
        $output.= basename($file, ('.c', '.cc', '.cpp')) . ".o: $file";
        if ($file =~ m/\.c$/) {
            $output.= "\n	\$(COMPILE) -o " . basename($file, ('.c', '.cc', '.cpp')) . ".o -c \$<\n";
        }
        else {
            $output.= "\n	\$(CXXCOMPILE) -o " . basename($file, ('.c', '.cc', '.cpp')) . ".o -c \$<\n";
        }
    }

    $output.= "\n";

    $output.= "depend: \$(SRC)\n";
    $output.= "\tmakedepend -Y -fMakefile \$(INCLUDES) \$(DEFINES) -- \$(CPPFLAGS) -- \$^\n";
    $output.= "\t" . 'sed -e \'s/^\(\.\.\/\)*\([a-z0-9_-]*\/\)*//\' -i Makefile' . "\n";
    
    $output.= "\n";
    $output.= ".PHONY: all clean depend\n";

}
else {
    $output = "";
}
}
