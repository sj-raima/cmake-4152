set (RDM_BUILD_TYPES "None Debug Release RelWithDebInfo MinSizeRel")
set (RDM_CONFIG_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel")

#
# Add build/configuration type RelO3WithDebInfo on anything except Windows
#
if (NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
    message (STATUS "Build Configuration 'RelO3WithDebInfo' enabled on Linux")
    set(CMAKE_CXX_FLAGS_RELO3WITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} -g")
    set(CMAKE_C_FLAGS_RELO3WITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
    set(CMAKE_EXE_LINKER_FLAGS_RELO3WITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
    set (CMAKE_SHARED_LINKER_FLAGS_RELO3WITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} RelO3WithDebInfo")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};RelO3WithDebInfo")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_RELO3WITHDEBINFO
        CMAKE_C_FLAGS_RELO3WITHDEBINFO
        CMAKE_EXE_LINKER_FLAGS_RELO3WITHDEBINFO
        CMAKE_SHARED_LINKER_FLAGS_RELO3WITHDEBINFO
    )
endif()

#
# Add build/configuration type RelFlto
#
if (BUILD_SHARED_LIBS)
    message (STATUS "Build Configuration 'RelFlto' disabled for shared libraries")
else ()
    message (STATUS "Build Configuration 'RelFlto' enabled for static libraries")
    if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
        set(CMAKE_CXX_FLAGS_RELFLTO "${CMAKE_CXX_FLAGS_RELEASE} /GL")
        set(CMAKE_C_FLAGS_RELFLTO "${CMAKE_C_FLAGS_RELEASE} /GL")
        set(CMAKE_EXE_LINKER_FLAGS_RELFLTO "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTGL")
        set (CMAKE_SHARED_LINKER_FLAGS_RELFLTO "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTGL")
    else ()
        set(CMAKE_CXX_FLAGS_RELFLTO "${CMAKE_CXX_FLAGS_RELEASE} -flto")
        set(CMAKE_C_FLAGS_RELFLTO "${CMAKE_C_FLAGS_RELEASE} -flto")
        set(CMAKE_EXE_LINKER_FLAGS_RELFLTO "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -flto")
        set (CMAKE_SHARED_LINKER_FLAGS_RELFLTO "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} -flto")
    endif ()

    mark_as_advanced(
        CMAKE_CXX_FLAGS_RELFLTO
        CMAKE_C_FLAGS_RELFLTO
        CMAKE_EXE_LINKER_FLAGS_RELFLTO
        CMAKE_SHARED_LINKER_FLAGS_RELFLTO
    )
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} RelFlto")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};RelFlto")
endif ()

#
# Add build/configuration type SanitizeUndefined
#
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    message (STATUS "Build Configuration 'SanitizeUndefined' disabled for Windows")
else ()
    message (STATUS "Build Configuration 'SanitizeUndefined' enabled for Linux")
    set (FLAGS_SANITIZEUNDEFINED "-fno-omit-frame-pointer -fsanitize=undefined,bounds -D__SANITIZE_UNDEFINED__=1")
    set(CMAKE_CXX_FLAGS_SANITIZEUNDEFINED "${CMAKE_CXX_FLAGS_DEBUG} ${FLAGS_SANITIZEUNDEFINED}")
    set(CMAKE_C_FLAGS_SANITIZEUNDEFINED "${CMAKE_C_FLAGS_DEBUG} ${FLAGS_SANITIZEUNDEFINED}")
    set(CMAKE_EXE_LINKER_FLAGS_SANITIZEUNDEFINED "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZEUNDEFINED}")
    set (CMAKE_SHARED_LINKER_FLAGS_SANITIZEUNDEFINED "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZEUNDEFINED}")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_SANITIZEUNDEFINED
        CMAKE_C_FLAGS_SANITIZEUNDEFINED
        CMAKE_EXE_LINKER_FLAGS_SANITIZEUNDEFINED
        CMAKE_SHARED_LINKER_FLAGS_SANITIZEUNDEFINED
    )
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} SanitizeUndefined")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};SanitizeUndefined")
endif ()

#
# Add build/configuration type SanitizeAddress
#
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    message (STATUS "Build Configuration 'SanitizeAddress' disabled for Windows")
else ()
    message (STATUS "Build Configuration 'SanitizeAddress' enabled for Linux")
    set (FLAGS_SANITIZEADDRESS "-fsanitize=address -fsanitize-recover=address -D__SANITIZE_ADDRESS__=1")
    set(CMAKE_CXX_FLAGS_SANITIZEADDRESS "${CMAKE_CXX_FLAGS_DEBUG} ${FLAGS_SANITIZEADDRESS} -DRDM_TAG_MALLOC -DRDM_INIT=")
    set(CMAKE_C_FLAGS_SANITIZEADDRESS "${CMAKE_C_FLAGS_DEBUG} ${FLAGS_SANITIZEADDRESS}")
    set(CMAKE_EXE_LINKER_FLAGS_SANITIZEADDRESS "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZEADDRESS}")
    set (CMAKE_SHARED_LINKER_FLAGS_SANITIZEADDRESS "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZEADDRESS}")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_SANITIZEADDRESS
        CMAKE_C_FLAGS_SANITIZEADDRESS
        CMAKE_EXE_LINKER_FLAGS_SANITIZEADDRESS
        CMAKE_SHARED_LINKER_FLAGS_SANITIZEADDRESS
    )
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} SanitizeAddress")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};SanitizeAddress")
endif ()

#
# Add build/configuration type SanitizeMemory
#
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    message (STATUS "Build Configuration 'SanitizeMemory' disabled for Windows")
else ()
    message (STATUS "Build Configuration 'SanitizeMemory' enabled for Linux")
    set (FLAGS_SANITIZEMEMORY "-fsanitize=memory -fsanitize-recover=memory -D__SANITIZE_MEMORY__=1")
    set(CMAKE_CXX_FLAGS_SANITIZEMEMORY "${CMAKE_CXX_FLAGS_DEBUG} ${FLAGS_SANITIZEMEMORY} -DRDM_TAG_MALLOC -DRDM_INIT=")
    set(CMAKE_C_FLAGS_SANITIZEMEMORY "${CMAKE_C_FLAGS_DEBUG} ${FLAGS_SANITIZEMEMORY}")
    set(CMAKE_EXE_LINKER_FLAGS_SANITIZEMEMORY "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZEMEMORY}")
    set (CMAKE_SHARED_LINKER_FLAGS_SANITIZEMEMORY "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZEMEMORY}")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_SANITIZEMEMORY
        CMAKE_C_FLAGS_SANITIZEMEMORY
        CMAKE_EXE_LINKER_FLAGS_SANITIZEMEMORY
        CMAKE_SHARED_LINKER_FLAGS_SANITIZEMEMORY
    )
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} SanitizeMemory")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};SanitizeMemory")
endif ()

#
# Add build/configuration type SanitizeThread
#
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    message (STATUS "Build Configuration 'SanitizeThread' disabled for Windows")
else ()
    message (STATUS "Build Configuration 'SanitizeThread' enabled for Linux")
    set (FLAGS_SANITIZETHREAD "-fsanitize=thread -D__SANITIZE_THREAD__=1")
    set(CMAKE_CXX_FLAGS_SANITIZETHREAD "${CMAKE_CXX_FLAGS_DEBUG} ${FLAGS_SANITIZETHREAD}")
    set(CMAKE_C_FLAGS_SANITIZETHREAD "${CMAKE_C_FLAGS_DEBUG} ${FLAGS_SANITIZETHREAD}")
    set(CMAKE_EXE_LINKER_FLAGS_SANITIZETHREAD "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZETHREAD}")
    set (CMAKE_SHARED_LINKER_FLAGS_SANITIZETHREAD "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${FLAGS_SANITIZETHREAD}")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_SANITIZETHREAD
        CMAKE_C_FLAGS_SANITIZETHREAD
        CMAKE_EXE_LINKER_FLAGS_SANITIZETHREAD
        CMAKE_SHARED_LINKER_FLAGS_SANITIZETHREAD
    )
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} SanitizeThread")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};SanitizeThread")
endif ()

#
# Add build/configuration type Valgrind on Linux
#
if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    message (STATUS "Build Configuration 'Valgrind' enabled on Linux")
    set(CMAKE_CXX_FLAGS_VALGRIND "${CMAKE_CXX_FLAGS_DEBUG} -DRDM_TAG_MALLOC -DRDM_INIT=")
    set(CMAKE_C_FLAGS_VALGRIND "${CMAKE_C_FLAGS_DEBUG}")
    set(CMAKE_EXE_LINKER_FLAGS_VALGRIND "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
    set (CMAKE_SHARED_LINKER_FLAGS_VALGRIND "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} Valgrind")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};Valgrind")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_VALGRIND
        CMAKE_C_FLAGS_VALGRIND
        CMAKE_EXE_LINKER_FLAGS_VALGRIND
        CMAKE_SHARED_LINKER_FLAGS_VALGRIND
    )
endif()

#
# Add build/configuration type FailSim
#
message (STATUS "Build Configuration 'FailSim' enabled")
set(CMAKE_CXX_FLAGS_FAILSIM "${CMAKE_CXX_FLAGS_DEBUG} -DRDM_TAG_FAIL -DRDM_INIT=")
set(CMAKE_C_FLAGS_FAILSIM "${CMAKE_C_FLAGS_DEBUG}")
set(CMAKE_EXE_LINKER_FLAGS_FAILSIM "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set (CMAKE_SHARED_LINKER_FLAGS_FAILSIM "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} FailSim")
set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};FailSim")
mark_as_advanced(
    CMAKE_CXX_FLAGS_FAILSIM
    CMAKE_C_FLAGS_FAILSIM
    CMAKE_EXE_LINKER_FLAGS_FAILSIM
    CMAKE_SHARED_LINKER_FLAGS_FAILSIM
)

#
# Add build/configuration type FailSimAndSanitizeAddress on Linux
#
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    message (STATUS "Build Configuration 'FailSimAndSanitizeAddress' disabled for Windows")
else ()
    message (STATUS "Build Configuration 'FailSimAndSanitizeAddress' enabled for Linux")
    set(FLAGS_FAILSIMANDSANITIZEADDRESS "-fsanitize=address -fsanitize-recover=address -D__SANITIZE_ADDRESS__=1")
    set(CMAKE_CXX_FLAGS_FAILSIMANDSANITIZEADDRESS "${CMAKE_CXX_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEADDRESS} -DRDM_TAG_FAIL -DRDM_INIT=")
    set(CMAKE_C_FLAGS_FAILSIMANDSANITIZEADDRESS "${CMAKE_C_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEADDRESS}")
    set(CMAKE_EXE_LINKER_FLAGS_FAILSIMANDSANITIZEADDRESS "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEADDRESS}")
    set (CMAKE_SHARED_LINKER_FLAGS_FAILSIMANDSANITIZEADDRESS "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEADDRESS}")
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} FailSimAndSanitizeAddress")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};FailSimAndSanitizeAddress")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_FAILSIMANDSANITIZEADDRESS
        CMAKE_C_FLAGS_FAILSIMANDSANITIZEADDRESS
        CMAKE_EXE_LINKER_FLAGS_FAILSIMANDSANITIZEADDRESS
        CMAKE_SHARED_LINKER_FLAGS_FAILSIMANDSANITIZEADDRESS
    )
endif ()

#
# Add build/configuration type FailSimAndSanitizeMemory on Linux
#
if (${CMAKE_SYSTEM_NAME} STREQUAL Windows)
    message (STATUS "Build Configuration 'FailSimAndSanitizeMemory' disabled for Windows")
else ()
    message (STATUS "Build Configuration 'FailSimAndSanitizeMemory' enabled for Linux")
    set (FLAGS_FAILSIMANDSANITIZEMEMORY "-fsanitize=memory -fsanitize-recover=memory -D__SANITIZE_MEMORY__=1")
    set(CMAKE_CXX_FLAGS_FAILSIMANDSANITIZEMEMORY "${CMAKE_CXX_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEMEMORY} -DRDM_TAG_FAIL -DRDM_INIT=")
    set(CMAKE_C_FLAGS_FAILSIMANDSANITIZEMEMORY "${CMAKE_C_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEMEMORY}")
    set(CMAKE_EXE_LINKER_FLAGS_FAILSIMANDSANITIZEMEMORY "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEMEMORY}")
    set (CMAKE_SHARED_LINKER_FLAGS_FAILSIMANDSANITIZEMEMORY "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${FLAGS_FAILSIMANDSANITIZEMEMORY}")
    mark_as_advanced(
        CMAKE_CXX_FLAGS_FAILSIMANDSANITIZEMEMORY
        CMAKE_C_FLAGS_FAILSIMANDSANITIZEMEMORY
        CMAKE_EXE_LINKER_FLAGS_FAILSIMANDSANITIZEMEMORY
        CMAKE_SHARED_LINKER_FLAGS_FAILSIMANDSANITIZEMEMORY
    )
    set (RDM_BUILD_TYPES "${RDM_BUILD_TYPES} FailSimAndSanitizeMemory")
    set (RDM_CONFIG_TYPES "${RDM_CONFIG_TYPES};FailSimAndSanitizeMemory")
endif ()

# Update the documentation string of CMAKE_BUILD_TYPE for GUIs
set(CMAKE_BUILD_TYPE "${CMAKE_BUILD_TYPE}" CACHE STRING
  "Choose the type of build, options are: ${RDM_BUILD_TYPES}."
)

set (CMAKE_CONFIGURATION_TYPES "${RDM_CONFIG_TYPES}")
